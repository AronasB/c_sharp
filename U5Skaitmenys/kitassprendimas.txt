using System;
using System.IO;

namespace U5Skaitmenys
{
    internal class Program
    {
        const string CFd = "..\\..\\Duom.txt";
        const string CFr = "..\\..\\Rez.txt";
        static void Main(string[] args)
        {
            char[] skyrikliai = { ' ', '.', ',', '!', '?', ':', ';', '(', ')', '\t' };
            
            Apdoroti(CFd, CFr, skyrikliai);
        }
        /// <summary>
        /// Skaito failą, analizuoja eilutes, kuria rezultatų failą
        /// </summary>
        /// <param name="fv">Duomenų failas</param>
        /// <param name="fr">Rezultatų failas</param>
        /// <param name="skyrikliai">Žodžių skyrikliai</param>
        static void Apdoroti(string fv, string fr, char[] skyrikliai)
        {
            string rastiSk = string.Empty,
                   eilutė,
                   eilutės = string.Empty;

            using (StreamReader sr = new StreamReader(fv))
            {
                while ((eilutė = sr.ReadLine()) != null)
                {
                    if (eilutė.Length > 0)
                    {
                        string laikinas;
                        laikinas = Žodžiai(eilutė, skyrikliai);
                        if (laikinas.Length > 0)
                        {
                            int i, ilaik;
                            ilaik = eilutė.IndexOf(laikinas[0]);
                            i = Vieta(laikinas, eilutė, ilaik);
                            laikinas += Skyrikliai(eilutė.Substring(i + 1));
                            rastiSk += laikinas;
                            eilutė = eilutė.Replace(laikinas, string.Empty);
                        }
                        eilutės += eilutė + '\n';
                    }
                }
                eilutės = eilutės.Insert(0, rastiSk + '\n');
            }
            using (var far = File.CreateText(fr))
            {
                far.WriteLine(eilutės);
            }
        }
        /// <summary>
        /// Išskirsto eilute į žodžius ir grąžina tinkamą žodį
        /// </summary>
        /// <param name="line">Eilutė</param>
        /// <param name="skyrikliai">Skyrikliai</param>
        /// <returns>Žodis sudarytas vien iš skaičių</returns>
        static string Žodžiai(string line, char[] skyrikliai)
        {
            string[] žodžiai = line.Split(skyrikliai, StringSplitOptions.RemoveEmptyEntries);
            foreach (string žodis in žodžiai)
            {
                if (Skaičiai(žodis))
                    return žodis;
            }
            return string.Empty;
        }
        /// <summary>
        /// Grąžina ar žodis yra skaičius
        /// </summary>
        /// <param name="žodis">Žodis</param>
        /// <returns>true or false</returns>
        static bool Skaičiai(string žodis)
        {
            if (žodis.Length > 0 && Char.IsDigit(žodis[0]))
            {
                int j = 1;
                while (j < žodis.Length)
                {
                    if (!(Char.IsDigit(žodis[j])))
                        return false;
                    j++;
                }
                return true;
            }
            else
                return false;
        }
        /// <summary>
        /// Grąžina visus skyriklius po skaičiaus
        /// </summary>
        /// <param name="žodis">Žodis</param>
        /// <returns>Skyrikliai po skaičiaus</returns>
        static string Skyrikliai(string žodis)
        {
            if (žodis.Length > 0 && (Char.IsPunctuation(žodis[0]) || Char.IsWhiteSpace(žodis[0])))
            {
                int j = 1;
                string skyriklis = string.Empty + žodis[0];
                while (j < žodis.Length)
                {
                    if (!(Char.IsPunctuation(žodis[j]) || Char.IsWhiteSpace(žodis[j])))
                        return skyriklis;
                    skyriklis += žodis[j];
                    j++;
                }
                return skyriklis;
            }
            else
                return string.Empty;
        }
        /// <summary>
        /// Grąžina žodžio paskutines raidės vietą eilutėje
        /// </summary>
        /// <param name="žodis">Žodis</param>
        /// <param name="eilute">Eilutė</param>
        /// <param name="iPrad">Pradinio indekso vieta</param>
        /// <returns>Paskutinė žodžio vieta eilutėje</returns>
        static int Vieta(string žodis, string eilute, int iPrad)
        {
            int indeksas = -1;
            for (int i = iPrad; i < eilute.Length; i++)
                if (eilute[i] == žodis[0])
                {
                    i++;
                    for (int j = 1; j < žodis.Length && i < eilute.Length; j++, i++)
                    {
                        if (eilute[i] != žodis[j])
                            break;
                        else
                            indeksas = i;
                    }
                    if (indeksas == i)
                        break;
                }
            return indeksas;
        }
    }
}
